// Service Worker for MealMate PWA\nconst CACHE_NAME = 'mealmate-v1.0.0';\nconst urlsToCache = [\n  '/',\n  '/static/style.css',\n  '/static/script.js',\n  '/static/manifest.json',\n  '/static/icon-192.png',\n  'https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css',\n  'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css',\n  'https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap'\n];\n\n// Install event - cache resources\nself.addEventListener('install', (event) => {\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then((cache) => {\n        console.log('Service Worker: Cache opened');\n        return cache.addAll(urlsToCache);\n      })\n      .catch((error) => {\n        console.log('Service Worker: Cache failed', error);\n      })\n  );\n});\n\n// Activate event - clean up old caches\nself.addEventListener('activate', (event) => {\n  event.waitUntil(\n    caches.keys().then((cacheNames) => {\n      return Promise.all(\n        cacheNames.map((cacheName) => {\n          if (cacheName !== CACHE_NAME) {\n            console.log('Service Worker: Deleting old cache', cacheName);\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    })\n  );\n});\n\n// Fetch event - serve from cache when offline\nself.addEventListener('fetch', (event) => {\n  event.respondWith(\n    caches.match(event.request)\n      .then((response) => {\n        // Return cached version or fetch from network\n        if (response) {\n          return response;\n        }\n        \n        // Clone the request because it's a stream\n        const fetchRequest = event.request.clone();\n        \n        return fetch(fetchRequest).then((response) => {\n          // Check if valid response\n          if (!response || response.status !== 200 || response.type !== 'basic') {\n            return response;\n          }\n          \n          // Clone response because it's a stream\n          const responseToCache = response.clone();\n          \n          caches.open(CACHE_NAME)\n            .then((cache) => {\n              cache.put(event.request, responseToCache);\n            });\n          \n          return response;\n        }).catch(() => {\n          // If both cache and network fail, show offline page\n          if (event.request.destination === 'document') {\n            return caches.match('/');\n          }\n        });\n      })\n  );\n});\n\n// Background sync for offline recipe saves\nself.addEventListener('sync', (event) => {\n  if (event.tag === 'background-sync') {\n    console.log('Service Worker: Background sync triggered');\n    // Handle offline recipe saves here\n  }\n});\n\n// Push notifications (for future meal reminders)\nself.addEventListener('push', (event) => {\n  const options = {\n    body: event.data ? event.data.text() : 'MealMate notification',\n    icon: '/static/icon-192.png',\n    badge: '/static/icon-72.png',\n    vibrate: [100, 50, 100],\n    data: {\n      dateOfArrival: Date.now(),\n      primaryKey: 1\n    },\n    actions: [\n      {\n        action: 'explore',\n        title: 'Open MealMate',\n        icon: '/static/icon-72.png'\n      },\n      {\n        action: 'close',\n        title: 'Close',\n        icon: '/static/icon-72.png'\n      }\n    ]\n  };\n  \n  event.waitUntil(\n    self.registration.showNotification('MealMate', options)\n  );\n});